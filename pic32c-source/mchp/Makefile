# A config.mk file is required.  It is generated by the configure
# script, or you can roll your own.  The configuration is needed to
# install the suffix headers from the libc implementation.
include config.mk

# These variables are normally defined by configure.
INSTALLDIR ?= .
SOURCEDIR ?= .
SUFFIXDIR ?= .

# Usual Make variables.
CPP = cpp
CC = cc
CXX = c++
AR = ar

VPATH = $(SOURCEDIR)

# The suffix headers are in the libc implementation.  They need to be
# installed before building the library.
suffix-headers = smart-io.esfx
headers = smartio_suffix.h
srcs = smartio_suffix.cc
objs = $(addsuffix .o,$(basename $(srcs)))

# The lowercase names are meant for internal use only.
cflags =
cxxflags =
depflags = -MT $@ -MD -MP -MF $*.Tpo
COMPILE.c = $(CC) $(cflags) $(CPPFLAGS) $(CFLAGS) $(depflags)
COMPILE.cc = $(CXX) $(cxxflags) $(CPPFLAGS) $(CXXFLAGS) $(depflags)

all: libmchp.a

libmchp.a: $(objs)
	$(AR) rcs $@ $^

smartio_suffix.o: cxxflags += -std=c++11

# Deal with a quirk in Make 3.81 where the trailing '/' on order-only
# prerequisites is removed.  Use a trialing '.' to avoid it.
%/.:
	@test -d $(patsubst %/.,%/,$@) || mkdir -p $(patsubst %/.,%/,$@)

%.o: %.c
	$(COMPILE.c) -c -o $@ $<
	@mv -f $*.Tpo $*.Po

%.o: %.cc
	$(COMPILE.cc) -c -o $@ $<
	@mv -f $*.Tpo $*.Po

# Include the dependency files, if they are present.
$(foreach f,$(srcs),$(eval -include ./$(addsuffix .Po,$(basename $(f)))))

.PHONY: install install-headers install-suffix-headers clean
install: libmchp.a install-headers | $(INSTALLDIR)/lib/.
	cp $< $(INSTALLDIR)/lib/$<

install-headers: | $(INSTALLDIR)/include/.
	@for f in $(headers); do \
	  cp -v $(SOURCEDIR)/$$f $(INSTALLDIR)/include/$$f; \
	done

install-suffix-headers: | $(INSTALLDIR)/include/.
	@for f in $(suffix-headers); do \
	  cp -v $(SUFFIXDIR)/$$f $(INSTALLDIR)/include/$$f; \
	done

clean:
	rm -f *.o *.a *.Tpo *.po

# Useful debugging targets.
print-%:
	@printf '%s = %s\n' "$*" "$($*)"

printvars:
	@$(foreach V,$(sort $(.VARIABLES)),\
	   $(if \
	     $(filter-out environ% default automatic,$(origin $V)),\
	       $(info $V=$($V) ($(value $V)))))
	@true
